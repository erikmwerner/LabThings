{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red49\green49\blue49;\red241\green241\blue241;\red255\green255\blue255;
\red0\green0\blue0;\red34\green121\blue174;}
{\*\expandedcolortbl;;\cssrgb\c25098\c25098\c25098;\cssrgb\c95686\c95686\c95686;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c0\c0;\cssrgb\c15294\c55294\c73725;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Better CRC?\
From: https://webcache.googleusercontent.com/search?q=cache:A53QcdaJKjYJ:https://lentz.com.au/blog/calculating-crc-with-a-tiny-32-entry-lookup-table+&cd=11&hl=en&ct=clnk&gl=us&client=safari\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
Copyright (c) 2007, Jim Studt  (original old version - many contributors since)\
\
The latest version of this library may be found at:\
  http://www.pjrc.com/teensy/td_libs_OneWire.html\
\
OneWire has been maintained by Paul Stoffregen (paul@pjrc.com) since\
January 2010.\
[...]\
\
// The 1-Wire CRC scheme is described in Maxim Application Note 27:\
// "Understanding and Using Cyclic Redundancy Checks with Maxim iButton Products"\
//\
\
#if ONEWIRE_CRC8_TABLE\
// Dow-CRC using polynomial X^8 + X^5 + X^4 + X^0\
static const uint8_t PROGMEM dscrc_table[] = \{\
    0x00, 0x5E, 0xBC, 0xE2, 0x61, 0x3F, 0xDD, 0x83,\
    0xC2, 0x9C, 0x7E, 0x20, 0xA3, 0xFD, 0x1F, 0x41,\
    0x00, 0x9D, 0x23, 0xBE, 0x46, 0xDB, 0x65, 0xF8,\
    0x8C, 0x11, 0xAF, 0x32, 0xCA, 0x57, 0xE9, 0x74\
\};\
\
//\
// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM\
// and the registers.\
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)\
\{\
    uint8_t crc = 0;\
\
    while (len--) \{\
        crc = *addr++ ^ crc;  // just re-using crc as intermediate\
        crc = pgm_read_byte(dscrc_table + (crc & 0x0f)) ^\
              pgm_read_byte(dscrc_table + 16 + ((crc >> 4) & 0x0f));\
    \}\
    return crc;\
\}\
#else\
[...]\
\pard\pardeftab720\partightenfactor0

\f2\fs39 \cf2 \cb4 Generating CRC tables\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \cb4 CRC tables are always only presented as magic output, but the feedback terms simply represent the results of eight shifts/xor operations for all combinations of data and CRC register values. Actually, the table generator routine uses the old-style method shifting each bit.\cb1 \
\cb4 Below is the rough code. For the Dow-CRC, the specified polynomial is X^8 + X^5 + X^4 + X^0. The first term tells us that it\'92s an 8 bit CRC. We work the rest in to the designate bits but from right to left, so we end up with binary 1000 1100 which is 0x8C in hex. This is the POLY value in the code.\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 for (i = 0; i <= 15; i++) \{\
    crc = i;\
\
    for (j = 8; j > 0; j--) \{\
        if (crc & 1)\
            crc = (crc >> 1) ^ POLY;\
        else\
            crc >>= 1;\
    \}\
    crctab[i] = crc;\
\}\
\
for (i = 0; i <= 15; i++) \{\
    crc = i << 4;\
\
    for (j = 8; j > 0; j--) \{\
        if (crc & 1)\
            crc = (crc >> 1) ^ poly;\
        else\
            crc >>= 1;\
    \}\
    crctab[16 + i] = crc;\
\}\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb4 If you want to generate a 256-entry table for the same:\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 for (i = 0; i <= 255; i++) \{\
    crc = i;\
    for (j = 8; j > 0; j--) \{\
        if (crc & 1)\
            crc = (crc >> 1) ^ POLY;\
        else\
            crc >>= 1;\
    \}\
    crctab[i] = crc;\
\}\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb4 Yes, this trickery basically works for any CRC (any number of bits), you just need to put in the correct polynomial.\'a0 However, some CRCs are \'93up side down\'94, and thus require a bit of adjustment along the way \'96 the CRC-16 as used by Xmodem and Zmodem worked that way, but I won\'92t bother you with that old stuff here as it\'92s not really used any more. Some CRCs also use different initialisation values, post-processing and check approaches. If you happen to need info on that, drop me a line as the info contained in this blog post is just a part of the docu I have here.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs36\fsmilli18200 \cf2 \cb4 CRC \'96 Polynomial Division\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \cb4 To calculate a CRC (Cyclic Redundancy Check) of a block of data, the data bits are considered to be the coefficients of a polynomial. This message (data) polynomial is first multiplied by the highest term in the polynomial (X^8, X^16 or X^32) then divided by the generator polynomial using modulo two arithemetic. The remainder left after the division is the desired CRC.\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\i \cf2 \cb4 CRCs are usually expressed as an polynomial expression such as:\cb1 \
\cb4 X^16 + X^12 + X^5 + 1\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\i0 \cf2 \cb4 The generator polynomial number is determined by setting bits corresponding to the power terms in the polynomial equation in an (unsigned) integer. We do this backwards and put the highest-order term in the the lowest-order bit. The highest term is implied (X^16 here, just means its\'92s a 16-bit CRC), the LSB is the X^15 term (0 here), the X^0 term (shown as + 1) results in the MSB being 1.\cb1 \
\cb4 Note that the usual hardware shift register implementation shifts bits into the lowest-order term. In our implementation, that means shifting towards the right. Why do we do it this way? Because the calculated CRC must be transmitted across a serial link from highest- to lowest-order term. UARTs transmit characters in order from LSB to MSB. By storing the CRC this way, we hand it to the UART in the order low-byte to high-byte; the UART sends each low-bit to high-bit; and the result is transmission bit by bit from highest- to lowest-order term without requiring any bit shuffling.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs36\fsmilli18200 \cf2 \cb4 Credits\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \cb4 Stuff found on BBS, numerous files with information and implementations.\cb1 \
\cb4 Comments in sources on CRC-32 calculation by Gary S. Brown.\cb1 \
\cb4 All other people hereby credited anonymously, because unfortunately the documents and sources encountered did not contain the name of a specific person or organisation. But, each source provided a piece of the puzzle!\cb1 \
\pard\pardeftab720\partightenfactor0

\fs36\fsmilli18200 \cf2 \cb4 Sources / Docs\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \cb4 My original source code and full docu is also available: {\field{\*\fldinst{HYPERLINK "http://bitbike.com/pub/xenia/crc_agl.zip"}}{\fldrslt \cf6 crc_agl.zip}}, as part of my archive of {\field{\*\fldinst{HYPERLINK "http://bitbike.com/lentzdev.html"}}{\fldrslt \cf6 Lentz Software-Development}}\'91s work in the 1990s.}